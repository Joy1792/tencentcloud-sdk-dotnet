/*
 * Copyright (c) 2018-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

namespace TencentCloud.Cwp.V20180228.Models
{
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using TencentCloud.Common;

    public class ModifyMalwareTimingScanSettingsRequest : AbstractModel
    {
        
        /// <summary>
        /// 检测模式 0 全盘检测  1快速检测
        /// </summary>
        [JsonProperty("CheckPattern")]
        public ulong? CheckPattern{ get; set; }

        /// <summary>
        /// 检测周期 开始时间，如：02:00:00
        /// </summary>
        [JsonProperty("StartTime")]
        public string StartTime{ get; set; }

        /// <summary>
        /// 检测周期 超时结束时间，如：04:00:00
        /// </summary>
        [JsonProperty("EndTime")]
        public string EndTime{ get; set; }

        /// <summary>
        /// 是否全部服务器 1 全部 2 自选
        /// </summary>
        [JsonProperty("IsGlobal")]
        public ulong? IsGlobal{ get; set; }

        /// <summary>
        /// 定时检测开关 0 关闭 1开启
        /// </summary>
        [JsonProperty("EnableScan")]
        public ulong? EnableScan{ get; set; }

        /// <summary>
        /// 监控模式 0 标准 1深度
        /// </summary>
        [JsonProperty("MonitoringPattern")]
        public ulong? MonitoringPattern{ get; set; }

        /// <summary>
        /// 扫描周期 默认每天 1
        /// </summary>
        [JsonProperty("Cycle")]
        public ulong? Cycle{ get; set; }

        /// <summary>
        /// 实时监控 0 关闭 1开启
        /// </summary>
        [JsonProperty("RealTimeMonitoring")]
        public ulong? RealTimeMonitoring{ get; set; }

        /// <summary>
        /// 自选服务器时必须 主机quuid的string数组
        /// </summary>
        [JsonProperty("QuuidList")]
        public string[] QuuidList{ get; set; }

        /// <summary>
        /// 是否自动隔离 1隔离 0 不隔离
        /// </summary>
        [JsonProperty("AutoIsolation")]
        public ulong? AutoIsolation{ get; set; }

        /// <summary>
        /// 是否杀掉进程 1杀掉 0不杀掉
        /// </summary>
        [JsonProperty("KillProcess")]
        public ulong? KillProcess{ get; set; }

        /// <summary>
        /// 1 清理, 0 不清理
        /// <li>本操作会修复被篡改的系统命令，计划任务等系统文件，操作中请确保yum/apt 可用</li>
        /// </summary>
        [JsonProperty("DoClean")]
        public ulong? DoClean{ get; set; }

        /// <summary>
        /// 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
        /// </summary>
        [JsonProperty("EngineType")]
        public ulong? EngineType{ get; set; }

        /// <summary>
        /// 启发引擎开关 0 关闭 1开启
        /// </summary>
        [JsonProperty("EnableInspiredEngine")]
        public ulong? EnableInspiredEngine{ get; set; }

        /// <summary>
        /// 是否开启恶意进程查杀[0:未开启,1:开启]
        /// </summary>
        [JsonProperty("EnableMemShellScan")]
        public ulong? EnableMemShellScan{ get; set; }

        /// <summary>
        /// 防护模式 0 标准 1重保
        /// </summary>
        [JsonProperty("ProtectMode")]
        public ulong? ProtectMode{ get; set; }

        /// <summary>
        /// 查杀范围 0 脚本类之外的恶意文件，1全部恶意文件
        /// </summary>
        [JsonProperty("ProtectFileScope")]
        public ulong? ProtectFileScope{ get; set; }


        /// <summary>
        /// For internal usage only. DO NOT USE IT.
        /// </summary>
        public override void ToMap(Dictionary<string, string> map, string prefix)
        {
            this.SetParamSimple(map, prefix + "CheckPattern", this.CheckPattern);
            this.SetParamSimple(map, prefix + "StartTime", this.StartTime);
            this.SetParamSimple(map, prefix + "EndTime", this.EndTime);
            this.SetParamSimple(map, prefix + "IsGlobal", this.IsGlobal);
            this.SetParamSimple(map, prefix + "EnableScan", this.EnableScan);
            this.SetParamSimple(map, prefix + "MonitoringPattern", this.MonitoringPattern);
            this.SetParamSimple(map, prefix + "Cycle", this.Cycle);
            this.SetParamSimple(map, prefix + "RealTimeMonitoring", this.RealTimeMonitoring);
            this.SetParamArraySimple(map, prefix + "QuuidList.", this.QuuidList);
            this.SetParamSimple(map, prefix + "AutoIsolation", this.AutoIsolation);
            this.SetParamSimple(map, prefix + "KillProcess", this.KillProcess);
            this.SetParamSimple(map, prefix + "DoClean", this.DoClean);
            this.SetParamSimple(map, prefix + "EngineType", this.EngineType);
            this.SetParamSimple(map, prefix + "EnableInspiredEngine", this.EnableInspiredEngine);
            this.SetParamSimple(map, prefix + "EnableMemShellScan", this.EnableMemShellScan);
            this.SetParamSimple(map, prefix + "ProtectMode", this.ProtectMode);
            this.SetParamSimple(map, prefix + "ProtectFileScope", this.ProtectFileScope);
        }
    }
}

